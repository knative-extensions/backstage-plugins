// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventMesh operation middleware
func (siw *ServerInterfaceWrapper) GetEventMesh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventMesh(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/getEventMesh", wrapper.GetEventMesh).Methods("GET")

	return r
}

type GetEventMeshRequestObject struct {
}

type GetEventMeshResponseObject interface {
	VisitGetEventMeshResponse(w http.ResponseWriter) error
}

type GetEventMesh200JSONResponse EventMesh

func (response GetEventMesh200JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventMesh401JSONResponse struct {
	Error string `json:"error"`
}

func (response GetEventMesh401JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(ctx context.Context, request GetEventMeshRequestObject) (GetEventMeshResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEventMesh operation middleware
func (sh *strictHandler) GetEventMesh(w http.ResponseWriter, r *http.Request) {
	var request GetEventMeshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventMesh(ctx, request.(GetEventMeshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventMesh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventMeshResponseObject); ok {
		if err := validResponse.VisitGetEventMeshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4CEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
