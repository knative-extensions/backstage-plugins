// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventMesh operation middleware
func (siw *ServerInterfaceWrapper) GetEventMesh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventMesh(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/getEventMesh", wrapper.GetEventMesh).Methods("GET")

	return r
}

type GetEventMeshRequestObject struct {
}

type GetEventMeshResponseObject interface {
	VisitGetEventMeshResponse(w http.ResponseWriter) error
}

type GetEventMesh200JSONResponse EventMesh

func (response GetEventMesh200JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventMesh401JSONResponse struct {
	Error string `json:"error"`
}

func (response GetEventMesh401JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(ctx context.Context, request GetEventMeshRequestObject) (GetEventMeshResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEventMesh operation middleware
func (sh *strictHandler) GetEventMesh(w http.ResponseWriter, r *http.Request) {
	var request GetEventMeshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventMesh(ctx, request.(GetEventMeshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventMesh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventMeshResponseObject); ok {
		if err := validResponse.VisitGetEventMeshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYWW/jNhD+KwRbYF/ka3d7+S1p2sJoWgRpgj7EAUJLY4sbimRJyhs18H8vhpR12PKV",
	"ZIHuU8Rr7vnmc55prDKtJEhn6fiZ2jiFjPnPc6MeweBXAjY2XDuuJB2X+4RbwojlmRZ8ziEhBrQBC9Ix",
	"vEfUnDDyu2SOL4H8sgTpuFyQ8q1LmUMBwCzHpSKxkjbPgMwK4lIg5yx+tI4tgGiRL7js04hqozQYx8Fb",
	"x6RUQVVYJgnHBRNXrWtzZTLm6JhaZ7hc0Ii6QkO9XkUb3p3VctEHNGbmjUYT4IllWgAKfoSCjumSiRxQ",
	"SClVzT5B7HBDsBmItzXt0ot8lVWSZbCd0T9ZBnvE0qzohW0aHWM1KrGaxTs0+aMD6moRR2nURi15Aomv",
	"s5tChwBvRI9bh1oB7xAUYcn63brsOqy5a5kzyIqeF9DzNtxHlDvIjk1nucGMYQWuc55s23k7udgXnNH7",
	"Dx97333/w4+9n4aj90eEJ6JPvYXqhcyjdLpaRdTAPzk3kKCDzWD7a8GyqoajVrN1Rvu+o9Z+TpmUILY9",
	"LA9ehiDrx18XhMTB6v8bhrzMrMMg0iUX+6jcf3sY2aXwRBw51JCdak7uyNf1X1er+e74A2y6bX11hM2C",
	"PjilewKWIIh1Jo9d6KRUiSScB3zM8EXCHOuTiXsXThr331liwXAm+L+QECYTYj2qqiNbLyCb3UUubMAG",
	"UUI2E6LEQku4DJkQuXUBGysE/tbAnI7pN4Oa0gxKPjMoyUwHCJc59RKOErXGtQ5ZsGf+1Gi57VxzJm04",
	"SP5OuQDyGUjMJIFsBkkjTa0nZYgivPwIoHEzIxY0M8wBmUHMcgtEKoevTdGQ4YsDMdgpwhpz56iAVJ5t",
	"h2Sj0hvxiaoa2FnQXuTuOL5sftTPv64JUueqT25SsECYAaKZtdiAWFMRgacYdNnQeDrnwoGBhKjcrZ16",
	"+NVvNjQ8kHkuY/w8cQ6U4UrOi44ZX52FND1M8+HwQ1wTKfzye/BQtYKv+/DQdDm+n5etX76WlbUc2fTr",
	"ol4dMJDepFhcrRaDjDsHCfmcgiRWZeBSrMmUaQ3S9o8bUl+cFRwutTcnDLti2Kbbb04b9qg9kTkYmIMB",
	"2aX1en20nsD1JHhnSfUwQK8Bq3ITAxH8ESooJsoQVrEPMvG4VaJ+MG6rwUJvDerdstl2Ozo48WdegP8L",
	"5ljwWRuImUOgdyaHzRL7y98OlKJlwvPUi57S8bQsmSmNpg2gndLx85TOOYhkFL6r+8GYKV2tVqfYfHt9",
	"2UHzri/X/CXcapuZOqfteIBBKo9jlTWV5kbsRpdNZX4ANYuwrayChl6ABkjehr/uqvcvQWHLjt37S7Ix",
	"QbZZAKYL4txwV/jiKZkjMAPmLHdp9e8qfBS2azsxXVgWEeVyrraDcnY1wWwbcIbDEuq+DFRZhgCUM9Fx",
	"58NUXzi7mtCILsHYIG7UH/aHmAGlQTLN6Zh+6A/7I2QMzKXe8sECXIuoL8B1oYXLjbQbBoWY4HB0jEuc",
	"GWs+jNy7wQXRXGwcb/skoWP6W1MrZs1qJW0I5vvhEP+gWJDeGKa14LF/PfhkwwQM9X4UC/RKfNg3uj+P",
	"Y7B2ngtRVEFPOp3sYxg/DkcnGdamZWCM8v+4rCv8VrLcpcrg75WD1Rzed1Tkll9Nsf1WydLxXbtY7+5X",
	"9xG1eZYxU4REh9JrBW71XwAAAP//4Asb8JEVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
