// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventMesh operation middleware
func (siw *ServerInterfaceWrapper) GetEventMesh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventMesh(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/getEventMesh", wrapper.GetEventMesh).Methods("GET")

	return r
}

type GetEventMeshRequestObject struct {
}

type GetEventMeshResponseObject interface {
	VisitGetEventMeshResponse(w http.ResponseWriter) error
}

type GetEventMesh200JSONResponse EventMesh

func (response GetEventMesh200JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventMesh401JSONResponse struct {
	Error string `json:"error"`
}

func (response GetEventMesh401JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(ctx context.Context, request GetEventMeshRequestObject) (GetEventMeshResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEventMesh operation middleware
func (sh *strictHandler) GetEventMesh(w http.ResponseWriter, r *http.Request) {
	var request GetEventMeshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventMesh(ctx, request.(GetEventMeshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventMesh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventMeshResponseObject); ok {
		if err := validResponse.VisitGetEventMeshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYWW8bNxD+KwRbIC+rK0kvvTlNWxhNi8C10QfLgKndkZYxl2TJWcVbQ/+9GHK1hy5L",
	"jfvQJy+vmW9mvjnkJ56awhoNGj2fPnGf5lCI8PnOmQdw9JWBT520KI3m03qfSc8E87KwSi4kZMyBdeBB",
	"o6B7zCyYYL9qgXIF7KcVaJR6yeq3mAskASC8pKVhqdG+LIDNK4Y5sHciffAolsCsKpdSD3nCrTMWHEoI",
	"6ITWJqqKyyyTtBDqY+/awrhCIJ9yj07qJU84Vhba9TrZsu6ilUs2EJh5AE0Q4FEUVgEJfoCKT/lKqBJI",
	"SC3VzD9BirShxBzUy0L7EER+ESotCtiN6O+igCNieVEN4jZPTkFNSrwV6QFN4egZda2IkzRaZ1Yygyzw",
	"7Lqy0cFb3pMeSSvQHUYiPNu829BuD5rbHpxRUQ2CgEHAcJdwiVCcGs56QzgnKlqXMtvFeXP5/phzJq/f",
	"vB188+133w9+GE9en+CehD8OlmYQI0/S+XqdcAd/ldJBRgZ2nR2uRWQNh5Nesu319t0eroXj38DnuzY2",
	"R1QEyFI0dqBgBYp5dGWKsULkRmXxPAatoBeZQDFkl/gqnnTuv/LMg5NCyb8hY0JnzIdQmxNLSnS3P1Tx",
	"fCx5quaRUKoOkGdSBxWpKj3GgDW0+NrBgk/5V6O2zo7qIjuqK+weZsARIrdu3wXUJfcWKPZnLhWwz8BS",
	"oRkUc8g6ru09qc1K6PIDgKXNgnmwwgkENodUlB6YNkivXdWREQJK7QANEx0Cn+SPxrJdl2xRtuOfpInb",
	"QRIGkYf9+O9aWfv8/9XN2lgN2XUOHphwwKzwnpKGOJUweEzB1klIpwupEBxkzJS4Mer+57DZ0XDPFqVO",
	"6fPMrlS7K3tX7Ubpx+Yshul+Vo7Hb9K2ItNX2IP7JhUC7+NDt8/w4wV+8/JLy3vPkG273rerZwDy65zI",
	"1UsxKCQiZOxzDpp5UwDmxMlcWAvaD0/rmv/5iPI81V58fDnkw37ffvEx5ojaM0cZBwtwoPdpvdocbbpm",
	"2wleedY8jKXXgTelS4Ep+QBNKWbGMcHSXGgNirooiaqrfgS3k2Axt0btbp1shw0dnTkvxvL/XqCINlsH",
	"qUAq9OhK2KbYH+F2HAN6EJ5mQfSMT2c1ZWY8mXUK7YxPn2Z8IUFlk/jd3I9gZny9Xp+D+ebqw54B7urD",
	"ZuaIt/owc0TrpyNyUn2cmqKrtHTqcHXZVhYaUJeEfWVNaRjE0gDZaeY9N5ke4vvZ0+kJs2idsUdH0k4H",
	"2Z0CKFyQlk5iFchTT3sgHLiLEvPmdy89itstTgoX0SLhUi/MrlMuPl5StB2gk7CCNi/jeKujA+qeiBKD",
	"m9oLFx8vecJX4HwUNxmOh2OKgLGghZV8yt8Mx8MJTQwC84B8tATsDddLwH3VAkun/Rag6BNqjiikpp6x",
	"mWFpXu7MggSXEidgv8z4lP/S1UpR89ZoH535ejymPyQWdAAjrFUyDa9Hn3zsgJHvJ02BQUlw+1b2l2kK",
	"3i9KparG6dleI4fkxrfjyVnA+mMZOGfCf0Baht9oUWJuHP3GeJbN8f0eRu7Y1RU77FGWT2/7ZL29W98l",
	"3JdFIVwVAx2p13Pc+p8AAAD//43lNAHaEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
