// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventMesh operation middleware
func (siw *ServerInterfaceWrapper) GetEventMesh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventMesh(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/getEventMesh", wrapper.GetEventMesh).Methods("GET")

	return r
}

type GetEventMeshRequestObject struct {
}

type GetEventMeshResponseObject interface {
	VisitGetEventMeshResponse(w http.ResponseWriter) error
}

type GetEventMesh200JSONResponse EventMesh

func (response GetEventMesh200JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventMesh401JSONResponse struct {
	Error string `json:"error"`
}

func (response GetEventMesh401JSONResponse) VisitGetEventMeshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve EventMesh
	// (GET /getEventMesh)
	GetEventMesh(ctx context.Context, request GetEventMeshRequestObject) (GetEventMeshResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEventMesh operation middleware
func (sh *strictHandler) GetEventMesh(w http.ResponseWriter, r *http.Request) {
	var request GetEventMeshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventMesh(ctx, request.(GetEventMeshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventMesh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventMeshResponseObject); ok {
		if err := validResponse.VisitGetEventMeshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYWY/bthP/KgT/fyAv8rFJevlt07TFImkR5EAf4gWWlsYWsxTJkiMnysLfvRhS1mHL",
	"XjvZoumTJR4zv/nNad3x1BTWaNDo+eyO+zSHQoTHZ87cgqOnDHzqpEVpNJ/V60x6JpiXhVVyKSFjDqwD",
	"DxoFnWNmyQR7oQXKNbBf1qBR6hWr72IukASA8JJeDUuN9mUBbFExzIE9E+mtR7ECZlW5knrME26dseBQ",
	"QkAntDZRVXzNMkkvQr3qHVsaVwjkM+7RSb3iCcfKQvu+SXasu2zlkg0EZhFAEwT4JAqrgATfQsVnfC1U",
	"CSSklmoWHyBFWlBiAephob0MIr8KlRYF7Hv0D1HAEbG8qEZxmSenoCYl3or0gKawdY+6VsRJGq0za5lB",
	"FuLsbWUjwTvsSY+kFegMIxGebe9tw24AzfsenElRjYKAUcBwnXCJUJzqznpBOCcqei9lto/z3dXzY+Rc",
	"PH7ydPTd9z/8OPppevH4BHoS/mm0MqPoeZLON5uEO/irlA4yMrBLdjgWkTUxnPSSbZDt64FYC9u/g8/3",
	"bWy2qAiQpWjsSMEaFPPoyhRjhciNyuJ+dFpBNzKBYsyu8FHc6Zx/5JkHJ4WSnyFjQmfMB1ebE0tKpNsf",
	"qng+ljxVx5FQqnaQZ1IHFakqPUaHNWHxfwdLPuP/m7R1dlIX2UldYQciA44Eckv7PqBucO+AYn/mUgH7",
	"CCwVmkGxgKxDbe9KbVZCh28BLC0WzIMVTiCwBaSi9MC0Qbrtqo6M4FBqB2iY6ATwSXw0lg1R4ssFsbAQ",
	"CzXEypvu9j4xvr/9Zf7q6tiHuJNVHRcmTWjtmnEwbwILh13/Zd23vf7fasBteI3Z2xw8MOGAWeE95Tl5",
	"O2HwKQVb1w3aXUqF4CBjpsStUTe/hsWOhhu2LHVKj2c20pqu7Fm176Wfm73oppt5OZ0+SdsmQk9hDW6a",
	"IA3xGC+6IcOP96Ttza/tSD1Ddu163r7dA5C/zSm4elUBCokIGfuYg2beFIA5xWQurAXtx6c1+n98qro/",
	"1B584jrEYX/UePDJ64jaM6cvB0twoIe0vt5ubRt927weedZcjN3CgTelS4EpeQtN92DGMcHSXGgNiho/",
	"iaoLeAS3l2Axtybtap1shw2dnDnixo7wXKCINlsHqUAq/OhK2A2xN+F0nFx6EO7mQfScz+Z1yMx5Mu8U",
	"2jmf3c35UoLKLuJzcz6CmfPNZnMO5nevXw7MnK9fbsekeKoPM0e0fjYhkurt1BRdpaVTh6vLrrLQgLpB",
	"2FfWlIZRLA2QnWbefcP0oXg/e6A+YXyuM/boFN3pIENTQG/WODrtfNks0JNw/jhQF8f+WEWD5QK2ueqZ",
	"wHC5MEXt5X9tgujiPLOAr5wp7b4HXpQLcBoQPLt8dcXCqSFtCfsoMachhHbW4PzusMEL8F6spF6Nb6OX",
	"xhmsv5F++BXE3d/5Dgqn2tzdfPjud1T12f0v9q17g6RpcPeCkLqAwrhqm0oPUwIP6/sGvirEPOuwuV8V",
	"qYlBWjqJVWip9d92EA7cZYl58wGTLsXlFjg1MWqWCZd6afZ5IgehYQ7QSVhDO63E7xQ6MlInL0oMvLUH",
	"Ll9d8YTX+U2MjqfjKTnFWNDCSj7jT8bT8QVVQYF5QD5ZAfa+kqwAh2YoLJ32O4AiJ1SnUUhNFX37MULo",
	"rPunnuBSQQjYrzI+4791tQbCrdE+kvl4OqUfEgs6gBHWKpmG25MPPv4viFPASX/ng5JA+24HS1Pwflkq",
	"VTWkZ4NGjonGp9OLs4D1Ww04Z8Kn7Dbk32lRYm6c/BwmjOM9Pt4fiMg9u7pix72Q5bP3/WB9f725Trgv",
	"i0K4Kjo6hl6PuM3fAQAA//8JbCpNoxcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
